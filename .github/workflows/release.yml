name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

  build-and-test:
    name: Build and Test
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine pytest

      - name: Run tests
        run: pytest tests/

      - name: Build package
        run: python -m build

      - name: Check package
        run: |
          twine check dist/*
          ls -la dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  publish-pypi:
    name: Publish to PyPI
    needs: [validate, build-and-test]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/openlongcontext/
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verify-metadata: true
          skip-existing: false

  publish-docker:
    name: Publish Docker Images
    needs: [validate, build-and-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            openlongcontext/openlongcontext
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}

  create-release:
    name: Create GitHub Release
    needs: [validate, build-and-test, publish-pypi, publish-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${VERSION}^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
            COMMITS=$(git log ${PREVIOUS_TAG}..${VERSION} --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Create changelog content
          cat > CHANGELOG_CONTENT.md << EOF
          ## What's Changed
          
          ### Features
          $(echo "$COMMITS" | grep -E "^- (feat|feature):" || echo "No new features")
          
          ### Bug Fixes
          $(echo "$COMMITS" | grep -E "^- (fix|bugfix):" || echo "No bug fixes")
          
          ### Documentation
          $(echo "$COMMITS" | grep -E "^- (docs|doc):" || echo "No documentation changes")
          
          ### Other Changes
          $(echo "$COMMITS" | grep -vE "^- (feat|feature|fix|bugfix|docs|doc):" || echo "No other changes")
          
          ## Installation
          
          ### PyPI
          \`\`\`bash
          pip install openlongcontext==${{ needs.validate.outputs.version }}
          \`\`\`
          
          ### Docker
          \`\`\`bash
          docker pull openlongcontext/openlongcontext:${{ needs.validate.outputs.version }}
          \`\`\`
          
          ## Full Changelog
          ${PREVIOUS_TAG:+https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION}}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: CHANGELOG_CONTENT.md
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          files: |
            dist/*
          generate_release_notes: true

  update-docs:
    name: Update Documentation
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build documentation
        run: |
          cd docs
          make clean
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          cname: openlongcontext.github.io

  notify:
    name: Send Notifications
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send success notification
        if: needs.create-release.result == 'success'
        run: |
          echo "Release ${{ needs.validate.outputs.version }} completed successfully!"
          # Add webhook or email notification here

      - name: Send failure notification
        if: needs.create-release.result == 'failure'
        run: |
          echo "Release ${{ needs.validate.outputs.version }} failed!"
          # Add webhook or email notification here