name: Documentation

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'openlongcontext/**/*.py'
      - 'README.md'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'openlongcontext/**/*.py'
      - 'README.md'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-docs-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-docs-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
          pip install mkdocs-material mkdocs-material-extensions mkdocstrings[python]

      - name: Build MkDocs documentation
        run: mkdocs build --strict --verbose

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

  deploy:
    name: Deploy to GitHub Pages
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

  check-links:
    name: Check Documentation Links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linkchecker
        run: |
          python -m pip install --upgrade pip
          pip install linkchecker

      - name: Build documentation
        run: |
          pip install -e ".[docs]"
          mkdocs build

      - name: Check links
        run: |
          linkchecker --no-warnings --check-extern site/ || true

  api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
          pip install sphinx-autodoc-typehints sphinx-autoapi

      - name: Generate API docs with Sphinx
        run: |
          cd docs
          sphinx-apidoc -o api ../openlongcontext --force --module-first
          make clean
          make html

      - name: Upload Sphinx docs
        uses: actions/upload-artifact@v3
        with:
          name: sphinx-docs
          path: docs/_build/html/

  validate-docstrings:
    name: Validate Docstrings
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydocstyle darglint

      - name: Check docstring style
        run: |
          pydocstyle openlongcontext --convention=google

      - name: Check docstring content
        run: |
          darglint openlongcontext --docstring-style=google